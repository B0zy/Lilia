
{%
local baseUrl = ldoc.css:gsub("ldoc.css", "")
local repo = "https://github.com/LiliaFramework/Lilia/tree/main/"
local pageTitle = mod and (ldoc.display_name(mod) .. " - " .. ldoc.title) or ldoc.title

local oldmarkup = ldoc.markup
function ldoc.markup(text, item)
	return oldmarkup(text, item, ldoc.plain)
end

function ldoc.url(path)
	return baseUrl .. path
end

function ldoc.realm_icon(realm)
	return "<span class=\"realm " .. (realm or "") .. "\"></span>";
end

function ldoc.is_kind_classmethod(kind)
	return kind ~= "libraries"
end

function ldoc.repo_reference(item)
    print("Original filename:", item.file.filename)

    -- Normalize the file path
    local relativePath = item.file.filename:gsub("\\", "/") -- Replace backslashes with forward slashes if on Windows
    print("Normalized path:", relativePath)

    -- Define the prefix to strip
    local prefixToStrip = "Lilia/home/runner/work/Lilia/Lilia/lilia/"
    print("Prefix to strip:", prefixToStrip)

    -- Remove the prefix if it exists
    if relativePath:sub(1, #prefixToStrip) == prefixToStrip then
        relativePath = relativePath:sub(#prefixToStrip + 1)
    end
    print("Stripped path:", relativePath)

    -- Construct the URL with the relative path and line number
    local finalPath = repo .. relativePath
    print("Final path:", finalPath)

    -- Ensure no double slashes in the URL
    finalPath = finalPath:gsub("//", "/")
    print("Final path without double slashes:", finalPath)

    -- Add line number
    local finalURL = finalPath .. "#L" .. item.lineno
    print("Final URL:", finalURL)

    return finalURL
end

local function moduleDescription(mod)
	if (mod.type == "manual") then
		return mod.body:gsub(mod.display_name, ""):gsub("#", ""):sub(1, 256) .. "..."
	end

	return mod.summary
end
%}

<html>
	<head>
		<title>{{pageTitle}}</title>

		<meta property="og:type" content="website" />
		<meta property="og:title" content="{{pageTitle}}" />
		<meta property="og:site_name" content="Lilia Documentation" />

		{% if (mod) then %}
			<meta property="og:description" content="{{moduleDescription(mod)}}" />
		{% else %}
			<meta property="og:description" content="Documentation and function reference for the Lilia framework." />
		{% end %}

		<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Source+Code+Pro" />
		<link rel="stylesheet" href="{* ldoc.css *}" />
		<link rel="stylesheet" href="{* ldoc.url('highlight.css') *}" />
	</head>

	<body>
		<main>
			{(docs/templates/sidebar.ltp)}

			<article>
				{% if (ldoc.root) then -- we're rendering the landing page (index.html) %}
					{(docs/templates/landing.ltp)}
				{% elseif (ldoc.body) then -- we're rendering non-code elements %}
					<div class="wrapper">
						{* ldoc.body *}
					</div>
				{% elseif (module) then -- we're rendering libary contents %}
					<div class="wrapper">
						{(docs/templates/module.ltp)}
					</div>
				{% end %}
			</article>
		</main>

		<script type="text/javascript" src="{* ldoc.url('app.js') *}"></script>
		<script type="text/javascript" src="{* ldoc.url('highlight.min.js') *}"></script>
		<script type="text/javascript">
			var elements = document.querySelectorAll("pre code")

			hljs.configure({
				languages: ["lua"]
			});

			for (var i = 0; i < elements.length; i++)
			{
				hljs.highlightBlock(elements[i]);
			}
		</script>
	</body>
</html>
